{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0ac0c110-818b-4fcf-983b-835f83109654",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1136,
        240
      ],
      "id": "c3cb9aa8-6f08-4a8e-a61e-6e2efd9c5097",
      "name": "Webhook",
      "webhookId": "0ac0c110-818b-4fcf-983b-835f83109654"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        352,
        448
      ],
      "id": "4ac1b632-3eaf-43ee-93fd-106419a64092",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "content": "## Espera por más mensajes",
        "height": 576,
        "width": 840,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -32,
        16
      ],
      "id": "2dd659b3-13c5-4651-b2e3-4e274c1b339b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2448,
        384
      ],
      "id": "147cdae8-088f-49ff-b2bc-3021fb5f6572",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "LD5Snfkk3Bg72nvO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "66ca2ea5-b44c-4703-a5cc-98db0188ecfb",
              "name": "contact_id",
              "value": "={{ $('Webhook').item.json.body.contact_id }}",
              "type": "string"
            },
            {
              "id": "ba6ecfe0-179c-4a47-a784-e89e32a01501",
              "name": "chunks",
              "value": "={{\n  (() => {\n    let text = $json.output || '';\n    text = text.replace(/\\r\\n/g, '\\n')\n               .replace(/\\*\\*(.*?)\\*\\*/g, '*$1*');\n\n    const MAX = 1900;\n    const MAX_MSGS = 5;\n\n    const splitByWords = (str, max) => {\n      const res = [];\n      const words = String(str).split(/\\s+/);\n      let buf = '';\n      for (const w of words) {\n        if (!buf) buf = w;\n        else if ((buf + ' ' + w).length <= max) buf += ' ' + w;\n        else { res.push(buf); buf = w; }\n      }\n      if (buf) res.push(buf);\n      return res;\n    };\n\n    const paragraphs = text.split(/\\n\\s*\\n+/).map(p => p.trim()).filter(Boolean);\n\n    const parts = [];\n    for (const p of paragraphs) {\n      if (p.length <= MAX) parts.push(p);\n      else parts.push(...splitByWords(p, MAX));\n    }\n\n    if (parts.length <= MAX_MSGS) return parts;\n\n    const packed = [];\n    let buf = '';\n    for (const piece of parts) {\n      const cand = buf ? buf + '\\n\\n' + piece : piece;\n      if (cand.length <= MAX) buf = cand;\n      else { if (buf) packed.push(buf); buf = piece; }\n    }\n    if (buf) packed.push(buf);\n    if (packed.length <= MAX_MSGS) return packed;\n\n    const all = parts.join('\\n\\n');\n    return splitByWords(all, MAX).slice(0, MAX_MSGS);\n  })()\n}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2752,
        -352
      ],
      "id": "e74bc4c1-8e63-4e74-917d-08db9f1dfd35",
      "name": "Dividir mensajes"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.manychat.com/fb/sending/sendContent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer 2898416:b057cee379fe53d915fa8c73b87ce816"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({\n  subscriber_id: String($json.contact_id),\n  data: {\n    version: \"v2\",\n    content: {\n      type: \"whatsapp\",\n      messages: [\n        { type: \"text\", text: String($json.chunks || '').replace(/\\r\\n/g, '\\n') }\n      ]\n    }\n  }\n}) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3328,
        -320
      ],
      "id": "0e555867-c54e-42b0-b776-958f25167ff0",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "VGFLnhAPGSYlkyzx",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body.contact_id }}",
        "messageData": "={{ $json.texto_norm }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        32,
        80
      ],
      "id": "c9a08f4a-ccbe-47c4-85e9-d3ac90d50585",
      "name": "Unir los mensajes",
      "credentials": {
        "redis": {
          "id": "fi7tWtYWyT49WAoB",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messages",
        "key": "={{ $('Webhook').item.json.body.contact_id }}",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        208,
        224
      ],
      "id": "153797e8-e925-40db-932e-5d647e43eaa8",
      "name": "Obtener los mensajes juntos",
      "credentials": {
        "redis": {
          "id": "fi7tWtYWyT49WAoB",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8e45d252-763b-486d-825f-acd25f0c63e0",
              "leftValue": "={{ $('Obtener los mensajes juntos').item.json.messages.last() }}",
              "rightValue": "={{ $node[\"Normalizar\"].json.texto_norm }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        368,
        224
      ],
      "id": "5c3cc118-35c1-472e-a28c-2f6c381d7281",
      "name": "Condición 1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    contact_id: $node[\"Webhook\"].json.body.contact_id,\n    buffered_messages: $json.messages.join(\"\\n\\n\")\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        528,
        208
      ],
      "id": "e33ee373-cf5f-476a-a76b-9c6e5b0d7405",
      "name": "Editar campos 1"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Webhook').item.json.body.contact_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        688,
        208
      ],
      "id": "ce9507ff-4b55-4a87-a061-b323bb72b774",
      "name": "Borrar mensajes",
      "credentials": {
        "redis": {
          "id": "fi7tWtYWyT49WAoB",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        32,
        224
      ],
      "id": "60f7ae9a-35ae-43f1-90f5-2a088109c3c8",
      "name": "Esperar 15 segundos",
      "webhookId": "84b91a2d-2a4a-49e3-bd66-b56fc03b73df"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2880,
        -336
      ],
      "id": "41ef964e-1c51-4403-850e-1906369db993",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3088,
        -336
      ],
      "id": "0f544f6d-522b-4ebb-bd1e-f1e65a55e29f",
      "name": "Enviar mensajes de a uno"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3344,
        -112
      ],
      "id": "15177529-258d-492d-a725-c6109ebde773",
      "name": "Wait1",
      "webhookId": "4cbf5d97-2feb-4ae7-8db7-770b99b99526"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3328,
        -496
      ],
      "id": "5fa5f938-7b74-4226-8f46-aa01eee3feaa",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ String($('Webhook').item.json.body.contact_id ?? $json.contact_id) }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2592,
        384
      ],
      "id": "7c808d75-6359-4ae8-889f-267309803cbc",
      "name": "Postgres Chat Memory",
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "9MuqYJCvVsAulWaw",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ /^https?:\\/\\/\\S+\\.(ogg|mp3|m4a|wav)(\\?.*)?$/i.test( String($json.body.message ?? '').trim() ) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "185fc9ee-ca3f-4d5e-8b51-10aaaea83b8c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d2eafa2e-398a-4407-a30c-abbb4d38748f",
                    "leftValue": "={{ !/^https?:\\/\\//i.test( String($json.body.message ?? '').trim() ) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b2637e1-7ae1-42ce-88dd-e5d01595de53",
                    "leftValue": "={{ /^https?:\\/\\/\\S+\\.(jpe?g|png|webp|gif)(\\?.*)?$/i.test( String($json.body.message ?? '').trim() ) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagen"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6a4cfbd1-fa5f-4639-9ffc-1a1f8601396d",
                    "leftValue": "={{ /^https?:\\/\\/\\S+\\.(mp4|mov|webm|mkv)(\\?.*)?$/i.test( String($json.body.message ?? '').trim() ) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -928,
        208
      ],
      "id": "61816585-e3f8-4edd-b58d-97c7b899c0c1",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebe29fa5-0f31-4741-9657-dbae5615e9ea",
              "name": "texto",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        80
      ],
      "id": "78c3f33b-099a-4f11-bf2f-bff3dafe515d",
      "name": "Promt de Audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "60f6548e-843a-4af5-8614-2beadaa937ab",
              "name": "texto",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        224
      ],
      "id": "471190e4-d6ba-4ea7-82d5-a03ed2d4b02f",
      "name": "Prompt de Texto"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "048023d3-4e03-45e5-90b6-15894b1c1945",
              "name": "texto_norm",
              "value": "={{ String($json.texto ?? '') }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        224
      ],
      "id": "bf363b48-89e5-4c65-9ca0-b9c49163289f",
      "name": "Normalizar"
    },
    {
      "parameters": {
        "url": "={{ $json.body.message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        80
      ],
      "id": "703e8dcf-ee75-405f-ac5e-60a7cb7afe72",
      "name": "Descargar Audio"
    },
    {
      "parameters": {
        "url": "={{ $json.body.message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -736,
        368
      ],
      "id": "c96cb16d-448c-4360-a8aa-357d8d7103b0",
      "name": "Descargar Imagen"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -560,
        80
      ],
      "id": "35f97e86-9244-47b1-baa4-71d777377b8d",
      "name": "Audio a Texto",
      "credentials": {
        "openAiApi": {
          "id": "LD5Snfkk3Bg72nvO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "text": "Describe la imagen",
        "inputType": "base64",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -560,
        368
      ],
      "id": "3a266f81-2c15-4f7d-b6d1-89a523bf08fb",
      "name": "Analizar Imagen",
      "credentials": {
        "openAiApi": {
          "id": "LD5Snfkk3Bg72nvO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "afb277c0-1ea5-4fa6-80cc-62d4a792813a",
              "name": "texto",
              "value": "={{ $json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        368
      ],
      "id": "20bc8ed3-ea17-4cdf-bb48-9254643f1817",
      "name": "Promt de Imagen"
    },
    {
      "parameters": {
        "content": "## Recepción de mensajes en cualquier formato",
        "height": 528,
        "width": 912
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -976,
        0
      ],
      "id": "a3583e28-9b34-454b-8b9b-9651923af89b",
      "name": "Sticky Note"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        976,
        224
      ],
      "id": "deea085c-5f87-4f89-abc9-5115cbf21858",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bd74374f-a057-48d9-8938-3c7b4b5e23cc",
              "leftValue": "={{ $items('Usuario antiguo o nuevo').length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1136,
        224
      ],
      "id": "bf02b1fc-9fc4-42f2-a98a-a47c11b593f8",
      "name": "Si"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1056,
        848
      ],
      "id": "259a0f25-3dad-4ade-9a56-4f08f22e1de1",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "LD5Snfkk3Bg72nvO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ String($('Webhook').item.json.body.contact_id ?? $json.contact_id) }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1184,
        848
      ],
      "id": "d2b15ddd-5e0e-49e8-9dc8-4f37f2ed61ce",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "9MuqYJCvVsAulWaw",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Primera interacción",
        "height": 608,
        "width": 352
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1024,
        448
      ],
      "id": "863e7753-2267-4587-b157-ef3df3cd3d12",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.buffered_messages }}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2448,
        224
      ],
      "id": "a84f19f8-5b19-49b7-90ce-e39afd627037",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "operation": "search",
        "tableName": "Perfiles",
        "searchColumn": "ID del Usuario",
        "searchTerm": "={{ $json.contact_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.seaTable",
      "typeVersion": 2,
      "position": [
        848,
        368
      ],
      "id": "f1bc9b42-db43-4fe7-a4d3-95ddcef75c69",
      "name": "Usuario antiguo o nuevo",
      "credentials": {
        "seaTableApi": {
          "id": "TOUy6ismIsfT8pRI",
          "name": "SeaTable account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "Perfiles",
        "columnsUi": {
          "columnValues": [
            {
              "columnName": "ID del Usuario",
              "columnValue": "={{ $json.contact_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.seaTable",
      "typeVersion": 2,
      "position": [
        1072,
        544
      ],
      "id": "463694cc-eb31-4199-accc-50e6e2e5cbb2",
      "name": "Create a row",
      "credentials": {
        "seaTableApi": {
          "id": "TOUy6ismIsfT8pRI",
          "name": "SeaTable account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.buffered_messages }}",
        "options": {
          "systemMessage": "=#Rol\n- Eres, Normy, la agente de inteligencia artificial de la Escuela Normal Superior de Corozal, diseñada para ayudar a toda la comunidad educativa. Todo el flujo de n8n es la agente, pero tú específicamente eres la subagente especializada en responderle a las personas que escriban por primera vez al agente. Esto último, sin embargo, es confidencial. Para quien pregunte, eres Normy, la agente completa.\n\n#Tareas\n\n- Tu función principal es iniciar el registro de los usuarios que escriban por primera vez a Normy.\n\n- Saluda al usuario cordialmente y si {{ $json.buffered_messages }} es una pregunta que puedes resolver, respóndela, si no di por el momento no puedes responder a eso y menciónale al usuario que es la primera vez que escribe, por lo que debe completar su perfil.\n\n- Pídele que te diga su nombre y que indique cuál es su perfil: Estudiante, Padre de Familia o Público General.\n\n#Notas\n\n- La personalidad de Normy es la de alguien amable, siempre dispuesta a ayudar, pero sin ser condescendiente ni aduladora.\n\n- Responde como una humana, manteniendo la naturalidad de una conversación real, con un tono interesante y sin repetir información que ya esté presente en el mensaje original.\n\n- Responde siempre en el mismo idioma en que el usuario escribió su mensaje.\n\n- No finalices los mensajes con frase como ¡Estoy aquí para ayudarte! o ¡Estoy aquí para asistirte! Omite las obviedades. Eres una agente de IA, obvio que estás para ayudar.\n\n- Al referirte a ti habla siempre en singular. Ejemplo: No uses \"necesitamos\", usa \"necesito\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1056,
        672
      ],
      "id": "cac40a60-c9d3-43fb-94f8-1bd0a2b6df33",
      "name": "Normy (Iniciador)"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1296,
        208
      ],
      "id": "0e7cb87f-8fd1-4732-b36b-40a388f72739",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "resource": "base",
        "operation": "metadata"
      },
      "type": "n8n-nodes-base.seaTable",
      "typeVersion": 2,
      "position": [
        1440,
        208
      ],
      "id": "082f3c80-a266-4276-b084-c941c43fd02c",
      "name": "Obtener metadata de una base",
      "credentials": {
        "seaTableApi": {
          "id": "TOUy6ismIsfT8pRI",
          "name": "SeaTable account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===== Helpers seguros para acceder a $items('Nodo') sin romper si no existe =====\nconst safeItems = (name) => { try { return $items(name); } catch { return []; } };\nconst safeItem  = (name, i = 0) => safeItems(name)[i];\n\n// ===== 1) Metadata de la base (columnas, cascadas, etc.) =====\nconst meta = safeItem('Obtener metadata de una base')?.json ?? $json;\nconst tables = Array.isArray(meta) ? (meta[0]?.tables ?? []) : (meta?.tables ?? []);\nif (!tables || !tables.length) {\n  return [{ json: { error: 'No se encontró metadata de la base' } }];\n}\n\nconst tableName = 'Perfiles';\nconst table = tables.find(t => t.name === tableName) || tables[0];\nconst cols = table?.columns || [];\nconst colByName = Object.fromEntries(cols.map(c => [c.name, c]));\n\n// ===== 2) Fila del usuario (resultado del search \"Usuario antiguo o nuevo\") =====\nconst rowItem = safeItem('Usuario antiguo o nuevo') || null;\nif (!rowItem) {\n  // Si no hay fila, no podemos calcular faltantes. Devuelve estado mínimo.\n  return [{\n    json: {\n      Row_Id: null,\n      Table_Name: tableName,\n      id_usuario: null,\n      perfil_reportado: null,\n      applicable_required: [],\n      blocked_by_cascade: [],\n      missing_fillable: [],\n      options_for_missing: {},\n      next_field_suggestion: null,\n      needs_completion: false,\n      buffered_messages:\n        (safeItem('Editar campos 1')?.json?.buffered_messages) ??\n        (safeItem('Si')?.json?.buffered_messages) ??\n        ($json?.buffered_messages ?? ''),\n      base_uuid: ($json.base_uuid ?? safeItem('Aggregate')?.json?.base_uuid ?? safeItem('Obtener metadata de una base')?.json?.base_uuid ?? ''),\n      base_name: ($json.base_name ?? safeItem('Aggregate')?.json?.base_name ?? safeItem('Obtener metadata de una base')?.json?.base_name ?? '')\n    }\n  }];\n}\n\nconst row = rowItem.json || {};\n\n// ===== 3) Mensajes bufferizados (texto del usuario) =====\nconst buffered_messages =\n  (safeItem('Editar campos 1')?.json?.buffered_messages) ??\n  (safeItem('Si')?.json?.buffered_messages) ??\n  ($json?.buffered_messages ?? '');\n\n// ===== 4) Utilidades de cascada/select =====\nfunction isEmpty(v) {\n  return v === null || v === undefined ||\n         (typeof v === 'string' && v.trim() === '') ||\n         (Array.isArray(v) && v.length === 0);\n}\n\nfunction getSelectedId(colName, rowObj) {\n  const col = colByName[colName];\n  if (!col) return null;\n  const opts = col?.data?.options || [];\n  const v = rowObj[colName];\n\n  if (v == null) return null;\n  if (typeof v === 'string') {\n    const byName = opts.find(o => o.name === v);\n    if (byName) return String(byName.id);\n    if (/^\\d+$/.test(v)) return String(v);\n    return null;\n  }\n  if (typeof v === 'number') return String(v);\n\n  if (Array.isArray(v) && v.length) {\n    const x = v[0];\n    if (x && x.id) return String(x.id);\n    const byName = opts.find(o => o.name === x);\n    return byName ? String(byName.id) : null;\n  }\n  if (typeof v === 'object') {\n    if (v.id) return String(v.id);\n    if (v.name) {\n      const byName = opts.find(o => o.name === v.name);\n      return byName ? String(byName.id) : null;\n    }\n  }\n  return null;\n}\n\nfunction getSelectedName(colName, rowObj) {\n  const v = rowObj[colName];\n  if (v == null) return null;\n  if (typeof v === 'string') return v;\n  if (Array.isArray(v) && v.length) {\n    const x = v[0];\n    return typeof x === 'string' ? x : (x?.name ?? null);\n  }\n  if (typeof v === 'object') return v.name ?? null;\n  return null;\n}\n\nfunction parentAllows(col, rowObj) {\n  const parentKey = col?.data?.cascade_column_key;\n  if (!parentKey) return true;\n\n  const parent = cols.find(c => c.key === parentKey);\n  if (!parent) return true;\n\n  const parentId = getSelectedId(parent.name, rowObj);\n  if (!parentId) return false;\n\n  const allowed = col?.data?.cascade_settings?.[String(parentId)];\n  if (allowed === undefined) return false;\n  if (Array.isArray(allowed) && allowed.length === 0) return false;\n  return true;\n}\n\nfunction allowedOptionNames(colName, rowObj) {\n  const col = colByName[colName];\n  if (!col) return [];\n  const opts = col?.data?.options || [];\n  const parentKey = col?.data?.cascade_column_key;\n\n  if (!parentKey) return opts.map(o => o.name);\n\n  const parent = cols.find(c => c.key === parentKey);\n  if (!parent) return opts.map(o => o.name);\n\n  const parentId = getSelectedId(parent.name, rowObj);\n  if (!parentId) return [];\n\n  const allowedIds = col?.data?.cascade_settings?.[String(parentId)];\n  if (!Array.isArray(allowedIds) || allowedIds.length === 0) return [];\n\n  const set = new Set(allowedIds.map(String));\n  return opts.filter(o => set.has(String(o.id))).map(o => o.name);\n}\n\n// ===== 5) Lógica de requeridos por perfil =====\nconst perfil = getSelectedName('Perfil', row) ?? null;\n\n// Siempre primero: Nombre, Categoría, Perfil\nconst required = ['Nombre', 'Categoría', 'Perfil'];\n\nif (perfil === 'Estudiante') {\n  required.push('Estudiante (Nivel)', 'Estudiante (Grado)', 'Estudiante (Salón)');\n}\n\nif (perfil === 'Padre de Familia') {\n  required.push('Padre de Familia (Número de estudiantes)');\n\n  const numOptName = getSelectedName('Padre de Familia (Número de estudiantes)', row);\n  const n = parseInt(numOptName ?? '0', 10) || 0;\n\n  const setsPF = [\n    ['Padre de Familia (Nivel Estudiante 1)','Padre de Familia (Grado Estudiante 1)','Padre de Familia (Salón Estudiante 1)'],\n    ['Padre de Familia (Nivel Estudiante 2)','Padre de Familia (Grado Estudiante 2)','Padre de Familia (Salón Estudiante 2)'],\n    ['Padre de Familia (Nivel Estudiante 3)','Padre de Familia (Grado Estudiante 3)','Padre de Familia (Salón Estudiante 3)'],\n  ];\n  for (let i = 0; i < Math.min(n, 3); i++) required.push(...setsPF[i]);\n}\n\n// Filtra requeridos que SÍ aplican por cascada\nconst applicable_required = required.filter(name => {\n  const col = colByName[name];\n  return col ? parentAllows(col, row) : false;\n});\n\n// Bloqueados por cascada (aún no se puede pedir)\nconst blocked_by_cascade = required.filter(name => {\n  const col = colByName[name];\n  return col ? !parentAllows(col, row) : false;\n});\n\n// Faltantes dentro de lo aplicable\nconst missing_fillable = applicable_required.filter(name => isEmpty(row[name]));\n\n// Opciones válidas para cada faltante (si es select)\nconst options_for_missing = Object.fromEntries(\n  missing_fillable.map(name => [name, allowedOptionNames(name, row)])\n);\n\n// Siguiente campo sugerido\nconst next_field_suggestion = missing_fillable[0] ?? null;\n\n// ===== 6) Datos de base opcionales (por si quieres pedir metadata vía tool HTTP) =====\nfunction pickFirst(...vals) {\n  for (const v of vals) if (v !== undefined && v !== null && String(v).trim() !== '') return v;\n  return '';\n}\n\nconst base_uuid = pickFirst(\n  $json.base_uuid,\n  safeItem('Aggregate')?.json?.base_uuid,\n  safeItem('Obtener metadata de una base')?.json?.base_uuid\n);\n\nconst base_name = pickFirst(\n  $json.base_name,\n  safeItem('Aggregate')?.json?.base_name,\n  safeItem('Obtener metadata de una base')?.json?.base_name\n);\n\n// ===== 7) Salida =====\nreturn [{\n  json: {\n    // Identificación de la fila/tabla para el MCP:\n    _id: row._id ?? null,\n    Row_Id: row._id ?? null,\n    Table_Name: tableName,\n\n    // Identificadores propios y estado:\n    id_usuario: row['ID del Usuario'] ?? null,\n    perfil_reportado: perfil,\n    applicable_required,\n    blocked_by_cascade,\n    missing_fillable,\n    options_for_missing,\n    next_field_suggestion,\n    needs_completion: missing_fillable.length > 0,\n\n    // Mensajes para el agente:\n    buffered_messages,\n\n    // (Opcional) datos de base:\n    base_uuid,\n    base_name\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        208
      ],
      "id": "ec2d4672-50bd-46eb-9aec-1e29ccac3f27",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bf59a4af-6977-4f7c-a110-f4521514abcb",
              "leftValue": "={{ $json.needs_completion }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1712,
        208
      ],
      "id": "473b1ac6-1b02-410a-a33f-13021abc83b7",
      "name": "¿Necesita completar perfil?"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1136,
        48
      ],
      "id": "718226a8-b18c-4aa0-9e3f-2756e1e88584",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "LD5Snfkk3Bg72nvO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ String($('Webhook').item.json.body.contact_id ?? $json.contact_id) }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1280,
        48
      ],
      "id": "8ea93f07-5512-4706-8eb1-1d67672df06a",
      "name": "Postgres Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "9MuqYJCvVsAulWaw",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Mensajes:\n{{ $json.buffered_messages }}\n\nContexto:\n{{ JSON.stringify({\n  contact_id: $json.id_usuario,\n  Row_Id: $json.Row_Id,\n  Table_Name: $json.Table_Name,\n  missing_fillable: $json.missing_fillable,\n  applicable_required: $json.applicable_required,\n  blocked_by_cascade: $json.blocked_by_cascade,\n  options_for_missing: $json.options_for_missing,\n  next_field_suggestion: $json.next_field_suggestion\n}, null, 2) }}",
        "options": {
          "systemMessage": "=## Rol\nEres Normy. Debes completar la fila del usuario en la tabla “Perfiles” sin revelar procesos internos.\n\n## Reglas de acción (OBLIGATORIAS)\n- En cuanto tengas un dato deducible o dicho por la persona, LLAMA al tool **“Actualiza una fila en Seatable”** con:\n  - Table_Name = el del contexto\n  - Row_Id = el del contexto\n  - y 1+ pares `Columna: Valor` a escribir.\n- Haz **1 sola** llamada por turno con **todos** los campos que ya puedas completar.\n- **No** digas “voy a actualizar”, “ya guardé”, “en silencio”, ni nombres de categorías internas. Escribe en la base y sigue.\n- **No** pidas confirmación si la intención es inequívoca (usa comprensión del lenguaje).\n- Tras escribir, revisa qué falta (según `missing_fillable`) y pregunta **solo por 1 campo** pendiente. Repite hasta que no falte nada.\n- Nunca digas “tu categoría es Normal/Especial”. Ese dato es interno.\n- Responde siempre en el idioma del usuario y con un tono natural, breve y claro.\n\n## Mapeos y deducciones\n- Si el usuario dice “soy estudiante … grado … salón …”, deduce:\n  - `Perfil` = “Estudiante”\n  - `Categoría` = “Normal”\n  - `Estudiante (Grado)` = el grado mencionado (ej. “Décimo (10)” si dice “décimo”, “11”→“Undécimo (11)”, etc.)\n  - `Estudiante (Salón)` = el número que mencione (1–6).\n- Si dice “padre de familia…”, deduce `Perfil` = “Padre de Familia” y pide lo que falte según cascada.\n- Si dice “público general…”, `Perfil` = “Público General`.\n- Si menciona nombre (“soy Miguel”, “me llamo Ana”), escribe `Nombre`.\n- Nunca insistas en campos ya completos (usa `missing_fillable`).\n\n## Cascadas (resumido)\nOrden base: `Nombre` → `Categoría` → `Perfil`.  \nSi `Perfil = Estudiante`: `Estudiante (Nivel)` → `Estudiante (Grado)` → `Estudiante (Salón)`.  \nRespeta `applicable_required` y `blocked_by_cascade`. Usa `options_for_missing` como lista válida.\n\n## Contexto (de n8n)\n- Usa `buffered_messages` como lo último que dijo la persona.\n- Usa `Row_Id` y `Table_Name` del contexto para todas las escrituras.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1136,
        -112
      ],
      "id": "ad0689d7-629c-4e1a-91fc-4eb5e2bc9956",
      "name": "Normy (Completador)"
    },
    {
      "parameters": {
        "sseEndpoint": "https://juansecabo.app.n8n.cloud/mcp/1c3d9677-19d5-4163-a70d-527c1eb57326"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        1392,
        48
      ],
      "id": "28499921-ddc2-4777-8b74-ae0b31d8d6ea",
      "name": "MCP Client"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Dividir mensajes": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unir los mensajes": {
      "main": [
        []
      ]
    },
    "Obtener los mensajes juntos": {
      "main": [
        [
          {
            "node": "Condición 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Condición 1": {
      "main": [
        [
          {
            "node": "Editar campos 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Editar campos 1": {
      "main": [
        [
          {
            "node": "Borrar mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Borrar mensajes": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Usuario antiguo o nuevo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Esperar 15 segundos": {
      "main": [
        [
          {
            "node": "Obtener los mensajes juntos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Enviar mensajes de a uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar mensajes de a uno": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Enviar mensajes de a uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Descargar Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prompt de Texto",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Descargar Imagen",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Promt de Audio": {
      "main": [
        [
          {
            "node": "Normalizar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt de Texto": {
      "main": [
        [
          {
            "node": "Normalizar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar": {
      "main": [
        [
          {
            "node": "Unir los mensajes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Esperar 15 segundos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Descargar Audio": {
      "main": [
        [
          {
            "node": "Audio a Texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Descargar Imagen": {
      "main": [
        [
          {
            "node": "Analizar Imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio a Texto": {
      "main": [
        [
          {
            "node": "Promt de Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analizar Imagen": {
      "main": [
        [
          {
            "node": "Promt de Imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Promt de Imagen": {
      "main": [
        [
          {
            "node": "Normalizar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Si",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Si": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          },
          {
            "node": "Normy (Iniciador)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Normy (Iniciador)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Normy (Iniciador)",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Dividir mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Usuario antiguo o nuevo": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Normy (Iniciador)": {
      "main": [
        [
          {
            "node": "Dividir mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Obtener metadata de una base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener metadata de una base": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "¿Necesita completar perfil?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Necesita completar perfil?": {
      "main": [
        [
          {
            "node": "Normy (Completador)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Normy (Completador)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "Normy (Completador)",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Normy (Completador)": {
      "main": [
        [
          {
            "node": "Dividir mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Normy (Completador)",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "829b301aa2071e12ee807007f2ceefe57bfeee80e1f6575d12e8e779c557b212"
  }
}
